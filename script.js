/**
 * TechPortal - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
 * –û—Å–Ω–æ–≤–Ω–æ–π JavaScript —Ñ–∞–π–ª
 * –í–µ—Ä—Å–∏—è: 2.1
 */

// –ó–∞—â–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
(function() {
    'use strict';

    // –ó–∞—â–∏—Ç–∞ –æ—Ç prototype pollution
    if (typeof Object.freeze === 'function') {
        Object.freeze(Object.prototype);
        Object.freeze(Array.prototype);
        Object.freeze(String.prototype);
    }
})();

let isSubmitting = false;
let csrfToken = '';

// Initialize CSRF token
async function initCSRF() {
    try {
        const response = await fetch('/api/csrf-token');
        const data = await response.json();
        if (data.csrfToken) {
            csrfToken = data.csrfToken;
        }
    } catch (error) {
        // –£–¥–∞–ª–µ–Ω–æ: console.warn('CSRF token fetch failed:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showToast(type, message) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—Å—Ç—ã
    const existingToasts = document.querySelectorAll('.toast');
    existingToasts.forEach(toast => toast.remove());

    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.innerHTML = `
        <div class="toast-content">
            <span class="toast-icon">${type === 'success' ? '‚úÖ' : '‚ùå'}</span>
            <span class="toast-message">${message.replace(/\n/g, '<br>')}</span>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 16px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 999999;
        animation: slideInRight 0.3s ease forwards;
        background: ${type === 'success' ? '#10b981' : '#ef4444'};
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        max-width: 350px;
        width: calc(100vw - 40px);
        box-sizing: border-box;
        font-size: 14px;
        line-height: 1.4;
        pointer-events: auto;
        transform: translateX(100%);
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
    if (window.innerWidth <= 768) {
        toast.style.cssText += `
            top: 10px;
            right: 10px;
            left: 10px;
            width: auto;
            max-width: none;
            font-size: 13px;
            padding: 12px 16px;
        `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!document.getElementById('toast-styles')) {
        const style = document.createElement('style');
        style.id = 'toast-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { 
                    transform: translateX(100%); 
                    opacity: 0; 
                }
                to { 
                    transform: translateX(0); 
                    opacity: 1; 
                }
            }
            @keyframes slideOutRight {
                from { 
                    transform: translateX(0); 
                    opacity: 1; 
                }
                to { 
                    transform: translateX(100%); 
                    opacity: 0; 
                }
            }
            @keyframes slideInTop {
                from { 
                    transform: translateY(-100%); 
                    opacity: 0; 
                }
                to { 
                    transform: translateY(0); 
                    opacity: 1; 
                }
            }
            @keyframes slideOutTop {
                from { 
                    transform: translateY(0); 
                    opacity: 1; 
                }
                to { 
                    transform: translateY(-100%); 
                    opacity: 0; 
                }
            }
            .toast-content {
                display: flex;
                align-items: center;
                gap: 8px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            }
            @media (max-width: 768px) {
                .toast {
                    animation: slideInTop 0.3s ease forwards !important;
                }
                .toast.hiding {
                    animation: slideOutTop 0.3s ease forwards !important;
                }
            }
        `;
        document.head.appendChild(style);
    }

    document.body.appendChild(toast);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        toast.style.transform = 'translateX(0)';
        toast.style.opacity = '1';
    }, 50);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è)
    setTimeout(() => {
        toast.classList.add('hiding');
        const isMobile = window.innerWidth <= 768;
        toast.style.animation = isMobile ? 'slideOutTop 0.3s ease forwards' : 'slideOutRight 0.3s ease forwards';

        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 300);
    }, 5000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG DOM loaded, starting initialization');
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Token on page load:', localStorage.getItem('authToken'));
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —Å—Ä–∞–∑—É
    const preloader = document.getElementById('preloader');
    if (preloader) {
        preloader.classList.add('hidden');
        document.body.classList.remove('loading');
    }
    initCustomCursor();
    initSideNav();
    initMobileNav();
    initScrollProgress();
    initStatsCounter();
    initPortfolioFilter();
    initLazyLoading();
    initScrollAnimations();
    initCalculator();
    initAdvancedCalculator();
    initChatbot();
    initModal();
    initFAQ();
    initCVDownload();
    initAuthButton();
    registerServiceWorker();

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CSRF –∏ —Ñ–æ—Ä–º—É
    initCSRFAndForm();

    // ProgressBar.js –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    document.querySelectorAll('.tech-pb').forEach(function(el) {
        var value = parseFloat(el.getAttribute('data-progress')) || 0;
        var svg = el.querySelector('svg');
        el.innerHTML = '';
        var bar = new ProgressBar.Circle(el, {
            strokeWidth: 5,
            trailWidth: 5,
            trailColor: '#232b3e',
            color: 'url(#tech-gradient)',
            easing: 'easeInOut',
            duration: 1200,
            from: { color: '#61dafb' },
            to: { color: '#6366f1' },
            step: function(state, circle) {
                circle.path.setAttribute('stroke', 'url(#tech-gradient)');
            }
        });
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤ defs
        var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        var grad = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
        grad.setAttribute('id', 'tech-gradient');
        grad.setAttribute('x1', '0'); grad.setAttribute('y1', '0'); grad.setAttribute('x2', '1'); grad.setAttribute('y2', '1');
        var stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
        stop1.setAttribute('offset', '0%'); stop1.setAttribute('stop-color', '#61dafb');
        var stop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
        stop2.setAttribute('offset', '100%'); stop2.setAttribute('stop-color', '#6366f1');
        grad.appendChild(stop1); grad.appendChild(stop2); defs.appendChild(grad);
        el.querySelector('svg')?.prepend(defs);
        bar.animate(value);
        // –ü–æ–º–µ—â–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ —Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞
        el.appendChild(svg);
        svg.style.position = 'absolute';
        svg.style.left = '50%';
        svg.style.top = '50%';
        svg.style.transform = 'translate(-50%, -50%)';
        svg.style.zIndex = '2';
        el.style.position = 'relative';
        el.style.width = '76px';
        el.style.height = '76px';
    });
});

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
async function initCSRFAndForm() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
    await initCSRF();
    // –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
    initContactForm();
}

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function initCalculator() {
    const packageCards = document.querySelectorAll('.package-card');
    const serviceCheckboxes = document.querySelectorAll('.service-option input[type="checkbox"]');
    const costBreakdown = document.getElementById('costBreakdown');
    const totalPrice = document.getElementById('totalPrice');
    const sendToFormBtn = document.getElementById('sendToFormBtn');
    const resetCalculatorBtn = document.getElementById('resetCalculatorBtn');

    if (!packageCards.length || !costBreakdown || !totalPrice) return;

    let selectedPackage = null;
    let selectedServices = [];

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —É—Å–ª—É–≥
    packageCards.forEach(card => {
        card.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            packageCards.forEach(c => c.classList.remove('selected'));

            // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            card.classList.add('selected');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
            selectedPackage = {
                name: card.querySelector('.package-title').textContent,
                price: parseInt(card.dataset.price),
                type: card.dataset.package
            };

            updateCalculation();
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
    serviceCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            const serviceName = checkbox.parentNode.querySelector('.service-name').textContent;
            const servicePrice = parseInt(checkbox.dataset.price);
            const serviceType = checkbox.dataset.service;

            if (checkbox.checked) {
                selectedServices.push({
                    name: serviceName,
                    price: servicePrice,
                    type: serviceType
                });
            } else {
                selectedServices = selectedServices.filter(service => service.type !== serviceType);
            }

            updateCalculation();
        });
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞
    async function updateCalculation() {
        let breakdown = '';
        let total = 0;
        let chartLabels = [];
        let chartData = [];
        let chartColors = [];

        if (selectedPackage) {
            breakdown += `
                <div class="breakdown-item">
                    <span>${selectedPackage.name}</span>
                    <span>${formatPrice(selectedPackage.price)}</span>
                </div>
            `;
            total += selectedPackage.price;
            chartLabels.push(selectedPackage.name);
            chartData.push(selectedPackage.price);
            chartColors.push('#6366f1');
        } else {
            breakdown = `
                <div class="breakdown-item">
                    <span>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞</span>
                    <span>‚Äî</span>
                </div>
            `;
        }

        selectedServices.forEach(service => {
            breakdown += `
                <div class="breakdown-item">
                    <span>${service.name}</span>
                    <span>+${formatPrice(service.price)}</span>
                </div>
            `;
            total += service.price;
            chartLabels.push(service.name);
            chartData.push(service.price);
            chartColors.push('#3b82f6');
        });

        // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const bonusDiscount = await getUserBonusDiscount();
        let finalTotal = total;
        let discountAmount = 0;
        if (bonusDiscount > 0 && total > 0) {
            discountAmount = (total * bonusDiscount) / 100;
            finalTotal = total - discountAmount;
            breakdown += `
                <div class="breakdown-item bonus-discount">
                    <span>üéâ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∫–∏–¥–∫–∞ ${bonusDiscount}%</span>
                    <span>-${formatPrice(discountAmount)}</span>
                </div>
            `;
            chartLabels.push('–°–∫–∏–¥–∫–∞');
            chartData.push(-discountAmount);
            chartColors.push('#10b981');
        }

        costBreakdown.innerHTML = breakdown;
        totalPrice.textContent = formatPrice(finalTotal);

        // Chart.js –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        const ctx = document.getElementById('calcChart').getContext('2d');
        if (calcChart && typeof calcChart.destroy === 'function') calcChart.destroy();
        calcChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: chartLabels,
                datasets: [{
                    data: chartData,
                    backgroundColor: chartColors,
                    borderWidth: 2,
                    borderColor: '#1e293b',
                    hoverOffset: 16
                }]
            },
            options: {
                plugins: {
                    legend: {
                        display: true,
                        position: 'bottom',
                        labels: {
                            color: '#fff',
                            font: { size: 14 }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.label || '';
                                let value = context.parsed;
                                return `${label}: ${value > 0 ? '+' : ''}${value} ‚Ç¨`;
                            }
                        }
                    }
                },
                cutout: '65%',
                responsive: false,
                animation: { animateRotate: true, animateScale: true },
                layout: { padding: 8 },
                backgroundColor: 'transparent'
            }
        });

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (sendToFormBtn) {
            sendToFormBtn.disabled = !selectedPackage;
            // –£–¥–∞–ª–µ–Ω–æ: console.log('selectedPackage:', selectedPackage);
            // –£–¥–∞–ª–µ–Ω–æ: console.log('selectedServices:', selectedServices);
            // –£–¥–∞–ª–µ–Ω–æ: console.log('sendToFormBtn.disabled:', sendToFormBtn.disabled);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
        const event = new CustomEvent('calculatorUpdated', {
            detail: {
                selectedPackage,
                selectedServices,
                total: finalTotal,
                originalTotal: total,
                bonusDiscount
            }
        });
        document.dispatchEvent(event);
    }

    // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
    function formatPrice(price) {
        return new Intl.NumberFormat('en-DE').format(price) + ' ‚Ç¨';
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–π —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function getUserBonusDiscount() {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) return 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG getUserBonusDiscount - token payload:', payload);
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG getUserBonusDiscount - current time:', Date.now());
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG getUserBonusDiscount - token exp:', payload.exp * 1000);
                
                if (Date.now() >= payload.exp * 1000) {
                    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG getUserBonusDiscount - token expired, removing');
                    localStorage.removeItem('authToken');
                    return 0;
                }
            } catch (error) {
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG getUserBonusDiscount - token parse error:', error);
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG getUserBonusDiscount - removing invalid token');
                localStorage.removeItem('authToken');
                return 0;
            }

            const response = await fetch('/api/user/profile', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success && data.bonus && data.bonus.hasActiveBonus) {
                    return data.bonus.bonusDiscount;
                }
            }
            
            return 0;
        } catch (error) {
            console.error('Error getting bonus discount:', error);
            return 0;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º—ã
    function generateCalculationText() {
        if (!selectedPackage) return '';

        let text = 'üßÆ –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –ü–†–û–ï–ö–¢–ê\n\n';
        text += `üìã –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç:\n${selectedPackage.name} ‚Äî ${formatPrice(selectedPackage.price)}\n\n`;

        if (selectedServices.length > 0) {
            text += 'üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n';
            selectedServices.forEach(service => {
                text += `‚Ä¢ ${service.name} ‚Äî ${formatPrice(service.price)}\n`;
            });
            text += '\n';
        }

        const total = selectedPackage.price + selectedServices.reduce((sum, service) => sum + service.price, 0);
        text += `üí∞ –ò–¢–û–ì–û: ${formatPrice(total)}\n\n`;
        text += '* –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞\n\n';
        text += '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n\n';

        return text;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º—É
    if (sendToFormBtn) {
        sendToFormBtn.addEventListener('click', () => {
            const calculationText = generateCalculationText();
            const messageTextarea = document.getElementById('message');

            if (messageTextarea) {
                messageTextarea.value = calculationText;
                messageTextarea.focus();

                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ
                const contactSection = document.getElementById('contact');
                if (contactSection) {
                    contactSection.scrollIntoView({ behavior: 'smooth' });
                }

                showToast('success', '–†–∞—Å—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
            }
        });
    }

    // –°–±—Ä–æ—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (resetCalculatorBtn) {
        resetCalculatorBtn.addEventListener('click', () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
            packageCards.forEach(card => card.classList.remove('selected'));
            selectedPackage = null;

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
            serviceCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            selectedServices = [];

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç
            updateCalculation();

            showToast('success', '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω');
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    updateCalculation();
}

// ===== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê =====

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏—à–∫–∞–º–∏
function initAdvancedCalculator() {
    const saveCalculationBtn = document.getElementById('saveCalculationBtn');
    const savedCalculations = document.getElementById('savedCalculations');
    const toggleComparisonBtn = document.getElementById('toggleComparisonBtn');
    const comparisonTable = document.getElementById('comparisonTable');
    const projectTimeline = document.getElementById('projectTimeline');

    let isComparisonMode = false;
    let savedCalcs = JSON.parse(localStorage.getItem('savedCalculations') || '[]');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    renderSavedCalculations();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    document.addEventListener('calculatorUpdated', (event) => {
        const { selectedPackage } = event.detail;

        if (saveCalculationBtn) {
            saveCalculationBtn.disabled = !selectedPackage;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
        if (selectedPackage) {
            updateProjectTimeline(selectedPackage.type);
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
    if (saveCalculationBtn) {
        saveCalculationBtn.addEventListener('click', async () => {
            const calculationData = getCurrentCalculation();

            if (!calculationData) {
                showToast('error', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞');
                return;
            }

            if (calculationData) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const token = getAuthToken();
                if (!token) {
                    showToast('error', '–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
                    return;
                }

                const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:', calculationData.package.name);
                if (!name) return;

                try {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ API
                    const response = await fetch('/api/user/calculations', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                            name: name.trim(),
                            package: calculationData.package,
                            services: calculationData.services,
                            total: calculationData.total,
                            date: new Date().toLocaleDateString('ru-RU')
                        })
                    });

                    if (response.ok) {
                        showToast('success', '–†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        renderSavedCalculations();
                    } else if (response.status === 401) {
                        localStorage.removeItem('authToken');
                        showToast('error', '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ');
                        setTimeout(() => {
                            window.location.href = '/login.html';
                        }, 2000);
                    } else {
                        showToast('error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞');
                    }
                } catch (error) {
                    console.error('Error saving calculation:', error);
                    showToast('error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞');
                }
            }
        });
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    function getAuthToken() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–≥–¥–µ –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ)
            let token = localStorage.getItem('authToken');
            if (token) return token;
            
            // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage
            const tokenData = sessionStorage.getItem('adminToken');
            if (!tokenData) return null;
            
            const parsed = JSON.parse(tokenData);
            if (parsed.expires && parsed.expires < Date.now()) {
                sessionStorage.removeItem('adminToken');
                return null;
            }
            
            return parsed.token;
        } catch (error) {
            return null;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    function getUserIdFromToken(token) {
        try {
            if (!token) return null;
            const payload = JSON.parse(atob(token.split('.')[1]));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
            if (payload.exp && payload.exp * 1000 < Date.now()) {
                return null;
            }
            
            return payload.userId || payload.email || payload.id || null;
        } catch (error) {
            // –£–¥–∞–ª–µ–Ω–æ: console.log('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            return null;
        }
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
    if (toggleComparisonBtn) {
        toggleComparisonBtn.addEventListener('click', () => {
            isComparisonMode = !isComparisonMode;

            if (isComparisonMode) {
                toggleComparisonBtn.innerHTML = '<span>–°–∫—Ä—ã—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</span>';
                comparisonTable.style.display = 'block';
                renderComparisonTable();
            } else {
                toggleComparisonBtn.innerHTML = '<span>–í–∫–ª—é—á–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</span>';
                comparisonTable.style.display = 'none';
            }
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    async function renderSavedCalculations() {
        if (!savedCalculations) return;

        const token = getAuthToken();
        
        if (!token) {
            savedCalculations.innerHTML = `
                <div class="saved-item-placeholder">
                    <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤</p>
                    <a href="/login.html" target="_blank" style="color: #667eea; text-decoration: none;">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>
                </div>
            `;
            return;
        }

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—á–µ—Ç—ã —á–µ—Ä–µ–∑ API
            const response = await fetch('/api/user/calculations', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                const userCalcs = await response.json();
                
                if (userCalcs.length === 0) {
                    savedCalculations.innerHTML = `
                        <div class="saved-item-placeholder">
                            <p>–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                        </div>
                    `;
                    return;
                }

                savedCalculations.innerHTML = userCalcs.map(calc => `
                    <div class="saved-item" data-calc-id="${calc._id}">
                        <div class="saved-item-header">
                            <span class="saved-item-name">${calc.name}</span>
                            <span class="saved-item-price">${formatPrice(calc.total)}</span>
                        </div>
                        <div class="saved-item-date">${new Date(calc.createdAt).toLocaleDateString('ru-RU')}</div>
                        <div class="saved-item-actions">
                            <button class="delete-btn" data-delete-id="${calc._id}">–£–¥–∞–ª–∏—Ç—å</button>
                        </div>
                    </div>
                `).join('');

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
                savedCalculations.querySelectorAll('.saved-item').forEach(item => {
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É (–∑–∞–≥—Ä—É–∑–∫–∞)
                    item.addEventListener('click', (e) => {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                        if (e.target.classList.contains('delete-btn')) return;
                        
                        const calcId = item.dataset.calcId;
                        const calc = userCalcs.find(c => c._id === calcId);
                        if (calc) {
                            loadSavedCalculation(calc);
                            showToast('success', '–†–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                        }
                    });
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                savedCalculations.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', async (e) => {
                        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å—á–µ—Ç–∞
                        
                        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—á–µ—Ç?')) return;
                        
                        const calcId = btn.dataset.deleteId;
                        
                        try {
                            const deleteResponse = await fetch(`/api/user/calculations/${calcId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Authorization': `Bearer ${token}`
                                }
                            });

                            if (deleteResponse.ok) {
                                renderSavedCalculations();
                                showToast('success', '–†–∞—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω');
                            } else {
                                showToast('error', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞');
                            }
                        } catch (error) {
                            console.error('Error deleting calculation:', error);
                            showToast('error', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞');
                        }
                    });
                });
            } else if (response.status === 401) {
                localStorage.removeItem('authToken');
                savedCalculations.innerHTML = `
                    <div class="saved-item-placeholder">
                        <p>–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ</p>
                        <a href="/login.html" target="_blank" style="color: #667eea; text-decoration: none;">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>
                    </div>
                `;
            }
        } catch (error) {
            console.error('Error loading calculations:', error);
            savedCalculations.innerHTML = `
                <div class="saved-item-placeholder">
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤</p>
                </div>
            `;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    function loadSavedCalculation(calc) {
        // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        document.querySelectorAll('.package-card').forEach(card => {
            card.classList.remove('selected');
            if (card.dataset.package === calc.package.type) {
                card.classList.add('selected');
            }
        });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ —É—Å–ª—É–≥
        document.querySelectorAll('.service-option input[type="checkbox"]').forEach(checkbox => {
            const serviceType = checkbox.dataset.service;
            checkbox.checked = calc.services.some(service => service.type === serviceType);
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const event = new CustomEvent('calculatorUpdated', {
            detail: {
                selectedPackage: calc.package,
                selectedServices: calc.services,
                total: calc.total
            }
        });
        document.dispatchEvent(event);
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    function renderComparisonTable() {
        if (!comparisonTable) return;

        const packages = [
            { name: '–õ–µ–Ω–¥–∏–Ω–≥', price: 50, features: ['–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞', 'SEO –±–∞–∑–æ–≤–æ–µ', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏'] },
            { name: '–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π', price: 90, features: ['–î–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü', '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞', 'CMS', 'SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'] },
            { name: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', price: 140, features: ['–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', '–ö–æ—Ä–∑–∏–Ω–∞ –∏ –æ–ø–ª–∞—Ç–∞', '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'] }
        ];

        const allFeatures = [...new Set(packages.flatMap(p => p.features))];

        comparisonTable.innerHTML = `
            <div class="comparison-header">
                <div>–§—É–Ω–∫—Ü–∏–∏</div>
                <div>–õ–µ–Ω–¥–∏–Ω–≥</div>
                <div>–ú–Ω–æ–≥–æ—Å—Ç—Ä.</div>
                <div>–ú–∞–≥–∞–∑–∏–Ω</div>
            </div>
            ${allFeatures.map(feature => `
                <div class="comparison-row">
                    <div class="comparison-feature">${feature}</div>
                    ${packages.map(pkg => `
                        <div class="comparison-value ${pkg.features.includes(feature) ? 'comparison-check' : 'comparison-cross'}">
                            ${pkg.features.includes(feature) ? '‚úì' : '‚úó'}
                        </div>
                    `).join('')}
                </div>
            `).join('')}
            <div class="comparison-row" style="font-weight: 600; background: var(--color-bg-secondary);">
                <div class="comparison-feature">–¶–µ–Ω–∞</div>
                ${packages.map(pkg => `
                    <div class="comparison-value">${pkg.price} ‚Ç¨</div>
                `).join('')}
            </div>
        `;
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
    function updateProjectTimeline(projectType) {
        if (!projectTimeline) return;

        const timelines = {
            landing: [
                { phase: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: '1-2 –¥–Ω—è', description: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ –¢–ó' },
                { phase: '–î–∏–∑–∞–π–Ω', duration: '2-3 –¥–Ω—è', description: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫–µ—Ç–æ–≤, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è' },
                { phase: '–í–µ—Ä—Å—Ç–∫–∞', duration: '3-4 –¥–Ω—è', description: 'HTML/CSS –∫–æ–¥, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å' },
                { phase: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', duration: '1-2 –¥–Ω—è', description: 'JavaScript, —Ñ–æ—Ä–º—ã, –∞–Ω–∏–º–∞—Ü–∏–∏' },
                { phase: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: '1 –¥–µ–Ω—å', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö' }
            ],
            multipage: [
                { phase: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: '2-3 –¥–Ω—è', description: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞, –¢–ó' },
                { phase: '–î–∏–∑–∞–π–Ω', duration: '4-5 –¥–Ω–µ–π', description: '–î–∏–∑–∞–π–Ω –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü' },
                { phase: '–í–µ—Ä—Å—Ç–∫–∞', duration: '5-7 –¥–Ω–µ–π', description: '–í–µ—Ä—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü' },
                { phase: 'CMS', duration: '2-3 –¥–Ω—è', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è' },
                { phase: '–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', duration: '1-2 –¥–Ω—è', description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞' },
                { phase: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: '1-2 –¥–Ω—è', description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' }
            ],
            ecommerce: [
                { phase: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: '3-4 –¥–Ω—è', description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –¢–ó, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' },
                { phase: '–î–∏–∑–∞–π–Ω', duration: '5-7 –¥–Ω–µ–π', description: '–î–∏–∑–∞–π–Ω –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤' },
                { phase: 'Backend', duration: '7-10 –¥–Ω–µ–π', description: '–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–∞–ª–æ–≥–∞, –∫–æ—Ä–∑–∏–Ω—ã, –∑–∞–∫–∞–∑–æ–≤' },
                { phase: 'Frontend', duration: '5-7 –¥–Ω–µ–π', description: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞–≥–∞–∑–∏–Ω–∞' },
                { phase: '–ü–ª–∞—Ç–µ–∂–∏', duration: '2-3 –¥–Ω—è', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º' },
                { phase: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: '2-3 –¥–Ω—è', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤' }
            ],
            custom: [
                { phase: '–ê–Ω–∞–ª–∏–∑', duration: '3-5 –¥–Ω–µ–π', description: '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π' },
                { phase: '–ü—Ä–æ—Ç–æ—Ç–∏–ø', duration: '5-7 –¥–Ω–µ–π', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞' },
                { phase: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', duration: '10-15 –¥–Ω–µ–π', description: '–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
                { phase: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', duration: '3-5 –¥–Ω–µ–π', description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤' },
                { phase: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: '3-4 –¥–Ω—è', description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' },
                { phase: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', duration: '2-3 –¥–Ω—è', description: '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è' }
            ]
        };

        const timeline = timelines[projectType];
        if (!timeline) return;

        projectTimeline.innerHTML = `
            <div class="timeline-container">
                <div class="timeline-line"></div>
                ${timeline.map(item => `
                    <div class="timeline-item">
                        <div class="timeline-phase">${item.phase}</div>
                        <div class="timeline-duration">${item.duration}</div>
                        <div class="timeline-description">${item.description}</div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    function getCurrentCalculation() {
        const selectedPackageCard = document.querySelector('.package-card.selected');
        if (!selectedPackageCard) return null;

        const selectedPackage = {
            name: selectedPackageCard.querySelector('.package-title').textContent,
            price: parseInt(selectedPackageCard.dataset.price),
            type: selectedPackageCard.dataset.package
        };

        const selectedServices = [];
        document.querySelectorAll('.service-option input[type="checkbox"]:checked').forEach(checkbox => {
            selectedServices.push({
                name: checkbox.parentNode.querySelector('.service-name').textContent,
                price: parseInt(checkbox.dataset.price),
                type: checkbox.dataset.service
            });
        });

        const total = selectedPackage.price + selectedServices.reduce((sum, service) => sum + service.price, 0);

        return { package: selectedPackage, services: selectedServices, total };
    }

    // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
    function formatPrice(price) {
        return new Intl.NumberFormat('en-DE').format(price) + ' ‚Ç¨';
    }
}

// ===== –ß–ê–¢–ë–û–¢ =====

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–±–æ—Ç–∞
function initChatbot() {
    const chatbotContainer = document.getElementById('chatbotContainer');
    const chatbotToggle = document.getElementById('chatbotToggle');
    const chatbotMessages = document.getElementById('chatbotMessages');
    const chatbotInput = document.getElementById('chatbotInput');
    const chatbotSendBtn = document.getElementById('chatbotSendBtn');
    const chatbotTyping = document.getElementById('chatbotTyping');

    if (!chatbotContainer || !chatbotToggle) return;

    let isOpen = false;

    // –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–±–æ—Ç–∞
    const chatbotKnowledge = {
        '—Ü–µ–Ω–∞': '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–æ–≤:\n‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥: –æ—Ç 50‚Ç¨\n‚Ä¢ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç: –æ—Ç 90‚Ç¨\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω: –æ—Ç 140‚Ç¨\n‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ—Ç 110‚Ç¨\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã—à–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞! üí∞',
        '—Å—Ä–æ–∫–∏': '–°—Ä–æ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥: 7-12 –¥–Ω–µ–π\n‚Ä¢ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π: 15-20 –¥–Ω–µ–π\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω: 25-35 –¥–Ω–µ–π\n‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: 28-40 –¥–Ω–µ–π\n\n–¢–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞. ‚è±Ô∏è',
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n‚Ä¢ Frontend: HTML5, CSS3, JavaScript, React\n‚Ä¢ Backend: Node.js, Express.js, MongoDB\n‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Git, Webpack, ESLint\n‚Ä¢ –•–æ—Å—Ç–∏–Ω–≥: Railway, Vercel, AWS\n\n–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è! ‚öôÔ∏è',
        '–ø—Ä–æ—Ü–µ—Å—Å': '–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:\n1. –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n3. –î–∏–∑–∞–π–Ω –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ\n4. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n6. –ó–∞–ø—É—Å–∫ –∏ –ø–µ—Ä–µ–¥–∞—á–∞\n\n–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ! üìã',
        '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ': '–í –º–æ–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –µ—Å—Ç—å:\n‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞\n‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã\n‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã" –≤—ã—à–µ! üíº',
        '–ø–æ–¥–¥–µ—Ä–∂–∫–∞': '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é:\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É 6 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å —Å–∞–π—Ç–æ–º\n‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é\n\n–í–∞—à —Å–∞–π—Ç –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ! üõ†Ô∏è',
        '–∫–æ–Ω—Ç–∞–∫—Ç—ã': '–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:\n‚Ä¢ Email: info@techportal.dev\n‚Ä¢ Telegram: @techportal_dev\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n\n–û—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤! üìû'
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–±–æ—Ç–∞
    chatbotToggle.addEventListener('click', () => {
        isOpen = !isOpen;
        chatbotContainer.classList.toggle('active', isOpen);

        if (isOpen && chatbotInput) {
            setTimeout(() => chatbotInput.focus(), 300);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('quick-btn')) {
            const question = e.target.dataset.question;
            if (question) {
                sendUserMessage(question);
                setTimeout(() => sendBotResponse(question), 800);
            }
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function sendUserMessage(message) {
        if (!chatbotMessages) return;

        const messageElement = document.createElement('div');
        messageElement.className = 'message message-user';
        messageElement.innerHTML = `
            <div class="message-avatar">
                <img src="images/user-avatar.jpg" alt="–í—ã" onerror="this.style.display='none'">
            </div>
            <div class="message-content">
                <p>${message}</p>
            </div>
        `;

        chatbotMessages.appendChild(messageElement);
        chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
    function sendBotResponse(query) {
        if (!chatbotMessages) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        showTypingIndicator();

        setTimeout(() => {
            hideTypingIndicator();

            const response = getBotResponse(query);

            function createBotMessage() {
                const messageElement = document.createElement('div');
                messageElement.className = 'message message-bot';
                messageElement.innerHTML = `
                 <div class="message-avatar">
                     <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                         <circle cx="12" cy="8" r="4" fill="#667eea"/>
                         <path d="M12 14c-4 0-7 2.5-7 5.5V21h14v-1.5c0-3-5.5-7-5.5z" fill="#667eea"/>
                         <circle cx="9" cy="7" r="1" fill="white"/>
                         <circle cx="15" cy="7" r="1" fill="white"/>
                         <path d="M9.5 9.5c.5.5 1.5.5 2 0s1.5 0 2 0" stroke="white" stroke-width="1" stroke-linecap="round"/>
                     </svg>
                 </div>
                 <div class="message-content">
                     <p>${response}</p>
                 </div>
             `;
                return messageElement;
            }

            chatbotMessages.appendChild(createBotMessage());
            chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
        }, 1500);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
    function getBotResponse(query) {
        const lowerQuery = query.toLowerCase();

        // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for (const [key, response] of Object.entries(chatbotKnowledge)) {
            if (lowerQuery.includes(key)) {
                return response;
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if (lowerQuery.includes('–ø—Ä–∏–≤–µ—Ç') || lowerQuery.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
            return '–ü—Ä–∏–≤–µ—Ç! üëã –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ü–µ–Ω–∞—Ö, —Å—Ä–æ–∫–∞—Ö –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.';
        }

        if (lowerQuery.includes('—Å–ø–∞—Å–∏–±–æ') || lowerQuery.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
            return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!';
        }

        if (lowerQuery.includes('–∑–∞–∫–∞–∑') || lowerQuery.includes('—Ö–æ—á—É')) {
            return '–û—Ç–ª–∏—á–Ω–æ! üéâ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é. –û–±—Å—É–¥–∏–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç –¥–µ—Ç–∞–ª—å–Ω–æ!';
        }

        // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:\n‚Ä¢ –¶–µ–Ω–∞—Ö –∏ —Å—Ä–æ–∫–∞—Ö\n‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!';
    }

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    function showTypingIndicator() {
        if (chatbotTyping) {
            chatbotTyping.style.display = 'flex';
        }
    }

    function hideTypingIndicator() {
        if (chatbotTyping) {
            chatbotTyping.style.display = 'none';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    function handleSendMessage() {
        if (!chatbotInput) return;

        const message = chatbotInput.value.trim();
        if (message) {
            sendUserMessage(message);
            chatbotInput.value = '';
            setTimeout(() => sendBotResponse(message), 800);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    if (chatbotInput && chatbotSendBtn) {
        chatbotSendBtn.addEventListener('click', handleSendMessage);

        chatbotInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleSendMessage();
            }
        });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (!isOpen) {
            const notification = document.getElementById('chatbotNotification');
            if (notification) {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0) scale(1)';

                setTimeout(() => {
                    notification.style.opacity = '0';
                    notification.style.transform = 'translateX(10px) scale(0.8)';
                }, 5000);
            }
        }
    }, 10000);
}

// ===== –ú–æ–¥—É–ª–∏ =====

// –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
function initPreloader() {
    const preloader = document.getElementById('preloader');
    
    if (preloader) {
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
                        preloader.classList.add('hidden');
        document.body.classList.remove('loading');

        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
                        document.querySelectorAll('.animate-on-load').forEach(el => {
                            el.classList.add('animate');
                        });
    }
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä
function initCustomCursor() {
    const cursor = document.getElementById('customCursor');
    const follower = document.getElementById('customCursorFollower');

    if (!cursor || !follower) return;

    // –¢–æ–ª—å–∫–æ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –º—ã—à—å—é
    if (window.matchMedia('(pointer: fine)').matches) {
        let mouseX = 0, mouseY = 0;
        let cursorX = 0, cursorY = 0;
        let followerX = 0, followerY = 0;
        let animationFrameId = null;

        const mouseMoveHandler = function(e) {
            mouseX = e.clientX;
            mouseY = e.clientY;
        };

        document.addEventListener('mousemove', mouseMoveHandler);

        const updateCursor = () => {
            cursorX += (mouseX - cursorX) * 0.2;
            cursorY += (mouseY - cursorY) * 0.2;
            followerX += (mouseX - followerX) * 0.1;
            followerY += (mouseY - followerY) * 0.1;

            cursor.style.transform = `translate3d(${cursorX}px, ${cursorY}px, 0)`;
            follower.style.transform = `translate3d(${followerX}px, ${followerY}px, 0)`;

            animationFrameId = requestAnimationFrame(updateCursor);
        };

        animationFrameId = requestAnimationFrame(updateCursor);

        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const interactiveElements = document.querySelectorAll('a, button, .work-card, .service-card, input, textarea, [data-cursor="pointer"]');

        interactiveElements.forEach(function(el) {
            el.addEventListener('mouseenter', function() {
                cursor.classList.add('cursor-hover');
                follower.classList.add('follower-hover');
            });

            el.addEventListener('mouseleave', function() {
                cursor.classList.remove('cursor-hover');
                follower.classList.remove('follower-hover');
            });
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('[data-cursor="view"]').forEach(el => {
            el.addEventListener('mouseenter', function() {
                cursor.classList.add('cursor-view');
                follower.classList.add('follower-view');
            });

            el.addEventListener('mouseleave', function() {
                cursor.classList.remove('cursor-view');
                follower.classList.remove('follower-view');
            });
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
        return function cleanup() {
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            document.removeEventListener('mousemove', mouseMoveHandler);
        };
    } else {
        cursor.style.display = 'none';
        follower.style.display = 'none';
    }
}

// –ë–æ–∫–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
function initSideNav() {
    const sideNav = document.getElementById('sideNav');
    const sideNavLinks = document.querySelectorAll('.side-nav-link');

    if (!sideNav || !sideNavLinks.length) return;

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Intersection Observer –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    const sections = document.querySelectorAll('section[id]');
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.3
    };

    const sectionObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const id = entry.target.getAttribute('id');

                sideNavLinks.forEach(link => {
                    link.classList.remove('active');

                    if (link.getAttribute('href') === '#' + id) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }, observerOptions);

    sections.forEach(section => {
        sectionObserver.observe(section);
    });

    // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
    sideNavLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
            if (link.classList.contains('external')) return;

            e.preventDefault();

            const targetId = this.getAttribute('href').substring(1);
            const targetSection = document.getElementById(targetId);

            if (targetSection) {
                window.scrollTo({
                    top: targetSection.offsetTop,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
function initMobileNav() {
    const mobileNavToggle = document.getElementById('mobileNavToggle');
    const mobileNav = document.getElementById('mobileNav');
    const mobileNavClose = document.getElementById('mobileNavClose');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const menuIcon = document.querySelector('.menu-icon');

    if (!mobileNavToggle || !mobileNav || !mobileNavClose) return;

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    mobileNavToggle.addEventListener('click', function() {
        if (mobileNav.classList.contains('active')) {
            mobileNav.classList.remove('active');
            document.body.style.overflow = '';
            mobileNavToggle.style.display = 'flex';
        } else {
            mobileNav.classList.add('active');
            document.body.style.overflow = 'hidden';
            mobileNavToggle.style.display = 'none';
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∏–∫–æ–Ω–∫—É –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if (menuIcon) {
        menuIcon.addEventListener('click', function(e) {
            if (mobileNav.classList.contains('active')) {
                mobileNav.classList.remove('active');
                document.body.style.overflow = '';
                mobileNavToggle.style.display = 'flex';
            } else {
                mobileNav.classList.add('active');
                document.body.style.overflow = 'hidden';
                mobileNavToggle.style.display = 'none';
            }
            e.stopPropagation();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    mobileNavClose.addEventListener('click', function() {
        mobileNav.classList.remove('active');
        document.body.style.overflow = '';
        mobileNavToggle.style.display = 'flex';
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–∞–º–æ –º–µ–Ω—é (—Ñ–æ–Ω)
    mobileNav.addEventListener('click', function(e) {
        if (e.target === mobileNav) {
            mobileNav.classList.remove('active');
            document.body.style.overflow = '';
            mobileNavToggle.style.display = 'flex';
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–µ–Ω—é
    document.addEventListener('click', function(e) {
        if (mobileNav.classList.contains('active') &&
            !mobileNav.contains(e.target) &&
            e.target !== mobileNavToggle) {
            mobileNav.classList.remove('active');
            document.body.style.overflow = '';
            mobileNavToggle.style.display = 'flex';
        }
    });

    // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
    mobileNavLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
            if (mobileNav.classList.contains('active')) {
                mobileNav.classList.remove('active');
                document.body.style.overflow = '';
                mobileNavToggle.style.display = 'flex';
            }

            if (this.getAttribute('href').startsWith('#')) {
                e.preventDefault();

                const targetId = this.getAttribute('href').substring(1);
                const targetSection = document.getElementById(targetId);

                if (targetSection) {
                    setTimeout(function() {
                        window.scrollTo({
                            top: targetSection.offsetTop,
                            behavior: 'smooth'
                        });
                    }, 300);
                }
            }
        });
    });
}

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫—Ä–æ–ª–ª–∞
function initScrollProgress() {
    const scrollProgress = document.getElementById('scrollProgress');

    if (!scrollProgress) return;

    function updateScrollProgress() {
        const windowHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const scrolled = (window.scrollY / windowHeight) * 100;

        scrollProgress.style.width = scrolled + '%';
    }

    window.addEventListener('scroll', updateScrollProgress);
    updateScrollProgress(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
}

// –°—á–µ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initStatsCounter() {
    const stats = document.querySelectorAll('.stat-number');

    if (!stats.length) return;

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const el = entry.target;
                const targetValue = parseInt(el.getAttribute('data-count'));
                const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
                const frameDuration = 1000 / 60; // 60fps
                const totalFrames = Math.round(duration / frameDuration);
                let frame = 0;
                let currentValue = 0;

                const animate = () => {
                    frame++;
                    const progress = frame / totalFrames;
                    const easedProgress = progress < 0.5
                        ? 4 * progress * progress * progress
                        : 1 - Math.pow(-2 * progress + 2, 3) / 2; // –ö—É–±–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è

                    currentValue = Math.round(easedProgress * targetValue);
                    el.textContent = currentValue;

                    if (frame < totalFrames) {
                        requestAnimationFrame(animate);
                    } else {
                        el.textContent = targetValue;
                    }
                };

                requestAnimationFrame(animate);
                observer.unobserve(el);
            }
        });
    }, { threshold: 0.5 });

    stats.forEach(stat => {
        observer.observe(stat);
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
function initPortfolioFilter() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const workItems = document.querySelectorAll('.work-item');

    if (!filterButtons.length || !workItems.length) return;

    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            filterButtons.forEach(btn => btn.classList.remove('active'));

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
            this.classList.add('active');

            const filterValue = this.getAttribute('data-filter');

            workItems.forEach(item => {
                if (filterValue === 'all') {
                    item.style.display = 'block';
                    setTimeout(() => {
                        item.classList.remove('filtered-out');
                    }, 10);
                } else {
                    if (item.classList.contains(filterValue)) {
                        item.style.display = 'block';
                        setTimeout(() => {
                            item.classList.remove('filtered-out');
                        }, 10);
                    } else {
                        item.classList.add('filtered-out');
                        setTimeout(() => {
                            item.style.display = 'none';
                        }, 300);
                    }
                }
            });
        });
    });
}

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function initLazyLoading() {
    if ('loading' in HTMLImageElement.prototype) {
        const images = document.querySelectorAll('img[loading="lazy"]');
        images.forEach(img => {
            if (img.dataset.src) {
                img.src = img.dataset.src;
            }
        });
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js';
        document.body.appendChild(script);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initScrollAnimations() {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');

    if (!animatedElements.length) return;

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate');
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '50px'
    });

    animatedElements.forEach(el => observer.observe(el));

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
    return function cleanup() {
        animatedElements.forEach(el => observer.unobserve(el));
    };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
function registerServiceWorker() {
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', function() {
            navigator.serviceWorker.register('/sw.js').then(function(registration) {
                // –£–¥–∞–ª–µ–Ω–æ: console.log('ServiceWorker —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration.scope);
            }).catch(function(error) {
                // –£–¥–∞–ª–µ–Ω–æ: console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ServiceWorker:', error);
            });
        });
    }
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function initModal() {
    const modal = document.getElementById('projectModal');
    const modalClose = document.getElementById('modalClose');
    const workLinks = document.querySelectorAll('.work-link');

    if (!modal || !modalClose) return;

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modalClose.addEventListener('click', function() {
        modal.classList.remove('active');
        document.body.style.overflow = '';
    });

    // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.classList.remove('active');
            document.body.style.overflow = '';
        }
    });

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
    const workItems = document.querySelectorAll('.work-item');
    
    workItems.forEach(function(item) {
        item.addEventListener('click', function(e) {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å—Å—ã–ª–∫—É
            if (e.target.closest('.work-link')) return;
            
            const projectId = this.getAttribute('data-project') || 
                             this.querySelector('.work-link')?.getAttribute('data-project');
            
            if (projectId) {
                openProjectModal(projectId);
            }
        });
    });
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    workLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const projectId = this.getAttribute('data-project');

            if (projectId) {
                openProjectModal(projectId);
            }
        });
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    function openProjectModal(projectId) {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
            const projectData = getProjectData(projectId);

            if (projectData) {
                // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                document.getElementById('modalTitle').textContent = projectData.title;
                document.getElementById('modalDescription').textContent = projectData.description;
                document.getElementById('modalAbout').textContent = projectData.about;

                // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–≥–æ–≤
                document.getElementById('modalTags').innerHTML = '';

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
                projectData.tags.forEach(function(tag) {
                    const tagElement = document.createElement('span');
                    tagElement.className = 'tag';
                    tagElement.textContent = tag;
                    document.getElementById('modalTags').appendChild(tagElement);
                });

                // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                document.getElementById('modalTechStack').innerHTML = '';

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                projectData.techStack.forEach(function(tech) {
                    const techElement = document.createElement('span');
                    techElement.className = 'tag';
                    techElement.textContent = tech;
                    document.getElementById('modalTechStack').appendChild(techElement);
                });

                // –û—á–∏—Å—Ç–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
                document.getElementById('modalFeatures').innerHTML = '';

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
                projectData.features.forEach(function(feature) {
                    const featureElement = document.createElement('li');
                    featureElement.textContent = feature;
                    document.getElementById('modalFeatures').appendChild(featureElement);
                });

                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                document.getElementById('modalImage').style.backgroundImage = 'url(' + projectData.image + ')';



                // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
    }
}

// –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function initContactForm() {
    const form = document.getElementById('contactForm');
    if (!form) return;

    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        if (isSubmitting) return;
        isSubmitting = true;

        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...</span>';
        submitBtn.disabled = true;

        try {
            const formData = new FormData(form);
            const name = formData.get('name');
            const email = formData.get('email');
            const message = formData.get('message');

            // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            const clientErrors = [];

            if (!name || name.trim().length < 2 || name.trim().length > 50) {
                clientErrors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
            }

            if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email) || email.length > 254) {
                clientErrors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
            }

            if (!message || message.trim().length < 10 || message.trim().length > 1000) {
                clientErrors.push('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤');
            }

            if (clientErrors.length > 0) {
                throw new Error(clientErrors.join('\n'));
            }

            const headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            };

            // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            if (csrfToken) {
                headers['X-CSRF-Token'] = csrfToken;
            }

            const response = await fetch('/api/contact', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({
                    name: name.trim(),
                    email: email.trim(),
                    message: message.trim()
                })
            });

            const data = await response.json();

            if (!response.ok) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –ø–æ–¥—Ä–æ–±–Ω–æ
                if (data.errors && Array.isArray(data.errors)) {
                    const errorMessage = data.errors.join('\n');
                    throw new Error(errorMessage);
                }
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }

            showToast('success', data.message || '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            form.reset();

        } catch (error) {
            console.error('Error:', error);

            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å CSRF —Ç–æ–∫–µ–Ω–æ–º, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
            if (error.message.includes('CSRF') || error.message.includes('csrf')) {
                await initCSRF();
                showToast('error', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑');
            } else {
                showToast('error', error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
            }

        } finally {
            isSubmitting = false;
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    });
}

// –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
function getProjectData(projectId) {
    const projects = {
        project1: {
            title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥',
            description: '–û–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç —Å –ø–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –∏ –ø–ª–∞–≤–Ω—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏',
            about: '–õ–µ–Ω–¥–∏–Ω–≥ –¥–ª—è IT-–∫–æ–º–ø–∞–Ω–∏–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º, –ø–ª–∞–≤–Ω—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏. –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è SEO.',
            tags: ['React', 'GSAP'],
            techStack: ['React', 'GSAP', 'Styled Components', 'Webpack', 'HTML5', 'CSS3'],
            features: [
                '–ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ',
                '–ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç—ã',
                '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω',
                '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                '–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è'
            ],
            image: '/images/project-placeholder.jpg',
            liveLink: '#',
            githubLink: '#'
        },
        project2: {
            title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
            description: '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤',
            about: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã –∏ –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            tags: ['Node.js', 'MongoDB'],
            techStack: ['Node.js', 'Express', 'MongoDB', 'React', 'Redux', 'Stripe API'],
            features: [
                '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π',
                '–ö–æ—Ä–∑–∏–Ω–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
                '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'
            ],
            image: '/images/project-placeholder.jpg',
            liveLink: '#',
            githubLink: '#'
        },
        project3: {
            title: '–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            description: '–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ö–æ–¥–∞ —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è',
            about: '–ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏, –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è.',
            tags: ['React', 'Firebase'],
            techStack: ['React', 'Firebase Auth', 'JWT', 'Node.js', 'Express'],
            features: [
                '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π',
                'JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ—Ü—Å–µ—Ç–∏',
                '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
                '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'
            ],
            image: '/images/project-placeholder.jpg',
            liveLink: '#',
            githubLink: '#'
        },
        project4: {
            title: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–ª–æ–≥',
            description: '–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–≥ —Å —Ä–æ–ª—è–º–∏ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
            about: '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π, –±–æ–≥–∞—Ç—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.',
            tags: ['React', 'Node.js'],
            techStack: ['React', 'Node.js', 'MongoDB', 'Redux'],
            features: [
                '–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ—Å—Ç—É–ø',
                '–°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤',
                '–ë–æ–≥–∞—Ç—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è',
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
            ],
            image: '/images/project-placeholder.jpg',
            liveLink: '#',
            githubLink: '#'
        },
        project5: {
            title: '–ö–∞—Å—Ç–æ–º–Ω–∞—è WordPress —Ç–µ–º–∞',
            description: '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏',
            about: '–ö–∞—Å—Ç–æ–º–Ω–∞—è WordPress —Ç–µ–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Advanced Custom Fields –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–±–∫–æ–≥–æ –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ–≥–æ —Å–∞–π—Ç–∞.',
            tags: ['WordPress', 'Custom Theme'],
            techStack: ['WordPress', 'JavaScript', 'ACF Pro', 'SCSS', 'Gulp'],
            features: [
                '–ì–∏–±–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤',
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WooCommerce',
                '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏',
                '–ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞'
            ],
            image: '/images/project-placeholder.jpg',
            liveLink: '#',
            githubLink: '#'
        },
        project6: {
            title: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞',
            description: '–¢–æ—á–Ω–∞—è pixel-perfect –≤–µ—Ä—Å—Ç–∫–∞ —Å –º–∞–∫–µ—Ç–∞ Figma —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
            about: 'Pixel-perfect –≤–µ—Ä—Å—Ç–∫–∞ –ø–æ –¥–∏–∑–∞–π–Ω—É –∏–∑ Figma —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.',
            tags: ['Figma', 'HTML/CSS'],
            techStack: ['HTML5', 'CSS3', 'SCSS', 'JavaScript', 'Gulp', 'Figma'],
            features: [
                'Pixel-perfect –≤–µ—Ä—Å—Ç–∫–∞',
                '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –¥–∏–∑–∞–π–Ω',
                '–ö—Ä–æ—Å—Å–±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
                '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                '–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'
            ],
            image: '/images/project-placeholder.jpg',
            liveLink: '#',
            githubLink: '#'
        }
    };

    return projects[projectId] || null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function debounce(func, wait = 20, immediate = true) {
    let timeout;
    return function() {
        const context = this, args = arguments;
        const later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}

function throttle(func, limit = 300) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function createElement(tag, attributes = {}, children = []) {
    const element = document.createElement(tag);

    Object.entries(attributes).forEach(([key, value]) => {
        if (key === 'classList' && Array.isArray(value)) {
            value.forEach(cls => element.classList.add(cls));
        } else if (key === 'dataset' && typeof value === 'object') {
            Object.entries(value).forEach(([dataKey, dataValue]) => {
                element.dataset[dataKey] = dataValue;
            });
        } else if (key.startsWith('on') && typeof value === 'function') {
            const eventName = key.toLowerCase().substring(2);
            element.addEventListener(eventName, value);
        } else {
            element.setAttribute(key, value);
        }
    });

    if (typeof children === 'string') {
        element.textContent = children;
    } else if (Array.isArray(children)) {
        children.forEach(child => {
            if (typeof child === 'string') {
                element.appendChild(document.createTextNode(child));
            } else if (child instanceof Node) {
                element.appendChild(child);
            }
        });
    }

    return element;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function formatDate(dateString) {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    }).format(date);
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
function generateId(prefix = '') {
    return `${prefix}${Math.random().toString(36).substring(2, 11)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CV
function initCVDownload() {
    const downloadCVBtn = document.getElementById('downloadCVBtn');

    if (!downloadCVBtn) return;

    downloadCVBtn.addEventListener('click', function(e) {
        e.preventDefault();

        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ CV –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        const link = document.createElement('a');
        link.href = 'cv.pdf';
        link.download = 'TechPortal_CV.pdf';
        link.target = '_blank';

        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        setTimeout(() => {
            document.body.removeChild(link);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
            showToast('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å', '–í–∞—à —Ñ–∞–π–ª —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è', 'success');
        }, 100);
    });
}

// FAQ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω
function initFAQ() {
    const faqItems = document.querySelectorAll('.faq-item');

    if (!faqItems.length) return;

    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');

        question.addEventListener('click', () => {
            const isActive = item.classList.contains('active');

            // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            faqItems.forEach(otherItem => {
                if (otherItem !== item) {
                    otherItem.classList.remove('active');
                }
            });

            // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if (!isActive) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏)
function decodeName(name) {
    if (!name || typeof name !== 'string') return name;
    
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG decodeName input:', name);
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG decodeName chars:', Array.from(name).map(c => `${c}(${c.charCodeAt(0)})`).join(' '));
    
    try {
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8 –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–π—Ç–æ–≤
        const bytes = new Uint8Array(name.length);
        for (let i = 0; i < name.length; i++) {
            bytes[i] = name.charCodeAt(i) & 0xFF; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –º–ª–∞–¥—à–∏–π –±–∞–π—Ç
        }
        const decoded = new TextDecoder('utf-8').decode(bytes);
        
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG decodeName method 1 result:', decoded);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü—É
        if (/[\u0400-\u04FF]/.test(decoded) || /^[a-zA-Z0-9\s]+$/.test(decoded)) {
            return decoded;
        }
    } catch (e) {
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG decodeName method 1 error:', e);
    }
    
    try {
        // –ú–µ—Ç–æ–¥ 2: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ escape/unescape (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
        const decoded = decodeURIComponent(escape(name));
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG decodeName method 2 result:', decoded);
        
        if (/[\u0400-\u04FF]/.test(decoded) || /^[a-zA-Z0-9\s]+$/.test(decoded)) {
            return decoded;
        }
    } catch (e) {
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG decodeName method 2 error:', e);
    }
    
    // –ú–µ—Ç–æ–¥ 3: –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const replacements = {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        '√ë√ê¬µ√ë√ë28': '—Ç–µ—Å—Ç28',
        '√ë√ê¬µ√ë√ë': '—Ç–µ—Å—Ç',
        '√ë√ê¬µ√ë': '—Ç–µ—Å',
        '√ê¬≥√ê¬µ√ê¬π': '–≥–µ–π',
        '√ë‚Äö√ê¬µ√ë√ë‚Äö': '—Ç–µ—Å—Ç',
        '√ê¬¥√ê¬ª√ê¬¥√ê¬æ': '–¥–ª–¥–æ',
        '√ê¬∞√ê¬∞√ê¬∞': '–∞–∞–∞',
        '√ê¬∞√ê¬¥√ê¬º√ê¬∏√ê¬Ω': '–∞–¥–º–∏–Ω',
        '√ê√ê¬¥√ê¬º√ê¬∏√ê¬Ω': '–ê–¥–º–∏–Ω',
        '√ê¬ø√ê¬æ√ê¬ª√ë≈í√ê¬∑√ê¬æ√ê¬≤√ê¬∞√ë‚Äö√ê¬µ√ê¬ª√ë≈í': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        
        // –ü–æ–ª–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        '√ê¬∞': '–∞', '√ê¬±': '–±', '√ê¬≤': '–≤', '√ê¬≥': '–≥', '√ê¬¥': '–¥', '√ê¬µ': '–µ', '√ë': '—ë',
        '√ê¬∂': '–∂', '√ê¬∑': '–∑', '√ê¬∏': '–∏', '√ê¬π': '–π', '√ê¬∫': '–∫', '√ê¬ª': '–ª', '√ê¬º': '–º',
        '√ê¬Ω': '–Ω', '√ê¬æ': '–æ', '√ê¬ø': '–ø', '√ë‚Ç¨': '—Ä', '√ë': '—Å', '√ë‚Äö': '—Ç', '√ë∆í': '—É',
        '√ë‚Äû': '—Ñ', '√ë‚Ä¶': '—Ö', '√ë‚Ä†': '—Ü', '√ë‚Ä°': '—á', '√ëÀÜ': '—à', '√ë‚Ä∞': '—â', '√ë≈†': '—ä',
        '√ë‚Äπ': '—ã', '√ë≈í': '—å', '√ë': '—ç', '√ë≈Ω': '—é', '√ë': '—è',
        
        // –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ -> –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
        '–ê': '–ê', '–ë': '–ë', '–í': '–í', '–ì': '–ì', '–î': '–î', '–ï': '–ï', '–Å': '–Å',
        '–ñ': '–ñ', '–ó': '–ó', '–ò': '–ò', '–ô': '–ô', '–ö': '–ö', '–õ': '–õ', '–ú': '–ú',
        '–ù': '–ù', '–û': '–û', '–ü': '–ü', '–†': '–†', '–°': '–°', '–¢': '–¢', '–£': '–£',
        '–§': '–§', '–•': '–•', '–¶': '–¶', '–ß': '–ß', '–®': '–®', '–©': '–©', '–™': '–™',
        '–´': '–´', '–¨': '–¨', '–≠': '–≠', '–Æ': '–Æ', '–Ø': '–Ø'
    };
    
    let result = name;
    for (const [corrupted, correct] of Object.entries(replacements)) {
        result = result.replace(new RegExp(corrupted.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), correct);
    }
    
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG decodeName final result:', result);
    return result;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function initAuthButton() {
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG initAuthButton called');
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Token in initAuthButton:', localStorage.getItem('authToken'));
    
    const authLink = document.getElementById('authLink');
    const authText = document.getElementById('authText');
    const authLinkMobile = document.getElementById('authLinkMobile');
    const authTextMobile = document.getElementById('authTextMobile');

    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Auth elements found:', {
    //     authLink: !!authLink,
    //     authText: !!authText,
    //     authLinkMobile: !!authLinkMobile,
    //     authTextMobile: !!authTextMobile
    // });

    if (!authLink || !authText || !authLinkMobile || !authTextMobile) {
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Missing auth elements, returning');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Calling checkAuthStatus');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ localStorage
    setTimeout(() => {
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Delayed checkAuthStatus call');
    checkAuthStatus();
    }, 100);

    function checkAuthStatus() {
        const token = localStorage.getItem('authToken');
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG checkAuthStatus - token exists:', !!token);
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG checkAuthStatus - token value:', token ? token.substring(0, 50) + '...' : 'null');
        
        if (!token) {
            // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG No token found');
            updateAuthButton(false);
            return;
        }
        
        const isExpired = isTokenExpired(token);
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Token expired:', isExpired);
        
        if (isExpired) {
            // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Token expired, removing');
            localStorage.removeItem('authToken');
            updateAuthButton(false);
            return;
        }
        
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Token valid, updating auth button');
        updateAuthButton(true);
    }

    function updateAuthButton(isLoggedIn) {
        // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG updateAuthButton called with isLoggedIn:', isLoggedIn);
        
        if (isLoggedIn) {
            const token = localStorage.getItem('authToken');
            const userInfo = getUserFromToken(token);
            
            // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG userInfo from token:', userInfo);
            
            if (userInfo) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const firstLetter = userInfo.name.charAt(0).toUpperCase();
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Setting user avatar with letter:', firstLetter);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–∫–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                authText.innerHTML = `<div class="user-avatar">${firstLetter}</div>`;
                authLink.href = 'profile.html';
                authLink.onclick = null;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                authTextMobile.innerHTML = `<div class="user-avatar-mobile">${firstLetter}</div> ${userInfo.name}`;
                authLinkMobile.href = 'profile.html';
                authLinkMobile.onclick = null;
                
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Auth button updated for logged in user');
            } else {
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG No userInfo, showing login');
                updateAuthButton(false);
            }
        } else {
            // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Setting login state');
            authText.textContent = '–í–æ–π—Ç–∏';
            authTextMobile.textContent = '–í–æ–π—Ç–∏';
            authLink.href = 'login.html';
            authLinkMobile.href = 'login.html';
            authLink.onclick = authLinkMobile.onclick = null;
        }
    }
    
    function getUserFromToken(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            
            // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Token payload:', payload); // –û—Ç–ª–∞–¥–∫–∞
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
            if (payload.exp && payload.exp * 1000 < Date.now()) {
                // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Token expired');
                return null;
            }
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            let decodedName = payload.name || payload.email?.split('@')[0];
            if (decodedName && typeof decodedName === 'string') {
                decodedName = decodeName(decodedName);
            }
            
            const userInfo = {
                userId: payload.userId,
                email: payload.email,
                name: decodedName,
                isAdmin: payload.isAdmin === true || payload.admin === true || payload.role === 'admin',
                role: payload.role
            };
            
            // –£–¥–∞–ª–µ–Ω–æ: console.log('üîç DEBUG Parsed user info:', userInfo); // –û—Ç–ª–∞–¥–∫–∞
            
            return userInfo;
        } catch (error) {
            console.error('Error parsing token:', error);
            return null;
        }
    }

    function isTokenExpired(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return Date.now() >= payload.exp * 1000;
        } catch (error) {
            return true;
        }
    }

    async function logout() {
        try {
            const token = localStorage.getItem('authToken');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ
            if (token) {
                // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                fetch('/api/user/logout', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }).catch(() => {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –≤—ã—Ö–æ–¥ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
        }
        
        // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('authToken');
        localStorage.removeItem('userInfo');
        sessionStorage.clear();
        
        updateAuthButton(false);
        showToast('success', '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        if (document.querySelector('.calculator-section')) {
            const renderFunction = window.renderSavedCalculations;
            if (typeof renderFunction === 'function') {
                renderFunction();
            }
        }
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        try {
            if ('caches' in window) {
                caches.keys().then(names => {
                    names.forEach(name => {
                        caches.delete(name);
                    });
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫—ç—à–∞
        }
    }
}

// Custom Cursor
(function() {
  const cursor = document.querySelector('.custom-cursor');
  const hoverEffect = document.querySelector('.cursor-hover-effect');
  if (!cursor || !hoverEffect) return;
  const inner = cursor.querySelector('.cursor-inner');
  const outer = cursor.querySelector('.cursor-outer');
  let mouseX = window.innerWidth / 2, mouseY = window.innerHeight / 2;
  let outerX = mouseX, outerY = mouseY;

  // –î–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
  document.addEventListener('mousemove', e => {
    mouseX = e.clientX;
    mouseY = e.clientY;
    inner.style.left = mouseX + 'px';
    inner.style.top = mouseY + 'px';
    hoverEffect.style.left = mouseX + 'px';
    hoverEffect.style.top = mouseY + 'px';
  });

  // –ü–ª–∞–≤–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫—Ä—É–≥–∞
  function animate() {
    outerX += (mouseX - outerX) * 0.85;
    outerY += (mouseY - outerY) * 0.85;
    if (outer) {
      outer.style.left = outerX + 'px';
      outer.style.top = outerY + 'px';
    }
    requestAnimationFrame(animate);
  }
  animate();

  // –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const hoverElements = 'a, button, .btn, input, textarea, select, label, .work-link, .auth-link, .auth-link-mobile';
  document.body.addEventListener('pointerover', e => {
    if (e.target.closest(hoverElements)) {
      cursor.style.opacity = '0';
      hoverEffect.classList.add('active');
    }
  });
  document.body.addEventListener('pointerout', e => {
    if (e.target.closest(hoverElements)) {
      cursor.style.opacity = '1';
      hoverEffect.classList.remove('active');
    }
  });

  // –°–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ –º—ã—à–∏
  document.addEventListener('mouseleave', () => {
    cursor.style.opacity = '0';
    hoverEffect.classList.remove('active');
  });
  document.addEventListener('mouseenter', () => {
    cursor.style.opacity = '1';
  });
})();
