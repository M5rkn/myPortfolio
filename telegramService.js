const TelegramBot = require('node-telegram-bot-api');

class TelegramService {
    constructor() {
        this.bot = null;
        this.adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;
        this.isEnabled = false;

        this.init();
    }

    init() {
        try {
            const token = process.env.TELEGRAM_BOT_TOKEN;

            if (!token || !this.adminChatId) {
                console.log('Telegram: —Ç–æ–∫–µ–Ω –∏–ª–∏ admin chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å polling —Ç–æ–ª—å–∫–æ –≤ development
            const isDev = process.env.NODE_ENV !== 'production';
            this.bot = new TelegramBot(token, {
                polling: isDev,
                webHook: !isDev
            });

            this.isEnabled = true;
            console.log('‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
            this.setupCommands();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error.message);
            this.isEnabled = false;
        }
    }

    setupCommands() {
        if (!this.bot) return;

        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, (msg) => {
            const chatId = msg.chat.id;
            const welcomeMessage = `
üéØ *TechPortal Bot*

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ TechPortal.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞
/help - –ü–æ–º–æ—â—å

_–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è._
            `;

            this.bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
        });

        // –ö–æ–º–∞–Ω–¥–∞ /help
        this.bot.onText(/\/help/, (msg) => {
            const chatId = msg.chat.id;
            const helpMessage = `
üìñ *–ü–æ–º–æ—â—å TechPortal Bot*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤

_–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É._
            `;

            this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
        });

        // –ö–æ–º–∞–Ω–¥–∞ /status
        this.bot.onText(/\/status/, (msg) => {
            const chatId = msg.chat.id;
            const statusMessage = `
‚úÖ *–°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω*

üåê –°–∞–π—Ç: ${process.env.SITE_URL || 'https://techportal.up.railway.app'}
‚ö° –°–µ—Ä–≤–µ—Ä: Railway
üîÑ Uptime: ${Math.floor(process.uptime() / 60)} –º–∏–Ω—É—Ç

_–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}_
            `;

            this.bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
        });

        console.log('üìã Telegram –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    async notifyNewContact(contact) {
        if (!this.isEnabled || !this.bot) return false;

        try {
            const message = `
üîî *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞!*

üë§ *–ò–º—è:* ${this.escapeMarkdown(contact.name)}
üìß *Email:* ${this.escapeMarkdown(contact.email)}
üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${this.escapeMarkdown(contact.message)}

üïê *–í—Ä–µ–º—è:* ${new Date(contact.createdAt).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
üåê *IP:* ${contact.ipAddress || 'N/A'}

_–û—Ç–≤–µ—Ç—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ email._
            `;

            await this.bot.sendMessage(this.adminChatId, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });

            console.log('üì¨ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async sendStats(stats) {
        if (!this.isEnabled || !this.bot) return false;

        try {
            const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TechPortal*

üìù *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalContacts}
‚Ä¢ –ù–æ–≤—ã–µ: ${stats.newContacts}
‚Ä¢ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: ${stats.unreadContacts}

üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:*
${stats.projectViews.map(p => `‚Ä¢ ${p.name}: ${p.views}`).join('\n')}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
            `;

            await this.bot.sendMessage(this.adminChatId, message, {
                parse_mode: 'Markdown'
            });

            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    async notifyError(error, context = '') {
        if (!this.isEnabled || !this.bot) return false;

        try {
            const message = `
üö® *–û—à–∏–±–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ!*

‚ö†Ô∏è *–ö–æ–Ω—Ç–µ–∫—Å—Ç:* ${context}
üìù *–û—à–∏–±–∫–∞:* ${this.escapeMarkdown(error.message)}
üïê *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

_–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞._
            `;

            await this.bot.sendMessage(this.adminChatId, message, {
                parse_mode: 'Markdown'
            });

            return true;

        } catch (telegramError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', telegramError.message);
            return false;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è production
    async setupWebhook(webhookUrl) {
        if (!this.bot || process.env.NODE_ENV !== 'production') return;

        try {
            await this.bot.setWebHook(`${webhookUrl}/telegram-webhook`);
            console.log('üîó Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', `${webhookUrl}/telegram-webhook`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.message);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
    handleWebhook(req, res) {
        if (!this.bot) {
            return res.status(500).json({ error: 'Bot not initialized' });
        }

        try {
            this.bot.processUpdate(req.body);
            res.status(200).json({ ok: true });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error.message);
            res.status(500).json({ error: 'Webhook processing failed' });
        }
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤
    escapeMarkdown(text) {
        if (typeof text !== 'string') return text;
        return text.replace(/([_*\\[\]()~`>#+-=|{}.!])/g, '\\$1');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    isAvailable() {
        return this.isEnabled && this.bot !== null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    async getBotInfo() {
        if (!this.bot) return null;

        try {
            return await this.bot.getMe();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error.message);
            return null;
        }
    }
}

module.exports = new TelegramService();
